/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sonoro.ui;

import com.sonoro.model.Member;
import com.sonoro.model.Section;
import com.sonoro.model.SectionUpdateListener;
import com.sonoro.util.JTextFieldHintUI;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author ryanl
 */
public class SectionDialog extends javax.swing.JDialog {

    private boolean inEditMode;
    private final Color initialEditButtonColor;
    private List<MemberButton> memberButtons;
    private List<List<Member>> membersCopy;
    private Section section;
    private SectionUpdateListener sectionUpdateListener;
    /**
     * Creates new form SectionDialog
     */
    public SectionDialog(java.awt.Frame parent, boolean modal, Section section) {
        super(parent, modal);
        initComponents();
        sectionNameField.setUI(new JTextFieldHintUI("Enter Section Name", Color.gray));
        if (section.getName() != null)
        {
            sectionNameField.setText(section.getName());
        }
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int dialogResult = JOptionPane.showConfirmDialog(null, "Discard changes?", "Warning", JOptionPane.YES_NO_OPTION);
                if(dialogResult == JOptionPane.YES_OPTION){
                    dispose();
                }
            }
        });
        this.section = section;
        membersCopy = section.cloneMembers();
        inEditMode = false;
        initialEditButtonColor = editButton.getBackground();
    }
    
    public void setSectionUpdateListener(SectionUpdateListener sectionUpdateListener)
    {
        this.sectionUpdateListener = sectionUpdateListener;
    }
    
    public void createMemberButtons()
    {
        GridLayout layout = (GridLayout) centerPanel.getLayout();
        layout.setRows(membersCopy.size());
        layout.setColumns(membersCopy.get(0).size());
        memberButtons = new ArrayList<>();
        for (List<Member> row : membersCopy)
        {
            for (Member member : row)
            {
                MemberButton memberButton = new MemberButton(member);
                memberButton.setSelected(member.isSelected());
                centerPanel.add(memberButton);
                memberButtons.add(memberButton);
            }
        }
    }
    
    private void resize(int actionId)
    {
        switch(actionId) {
            case 0:
                break;
            case 1:
                addBackRow();
                break;
            case 2:
                deleteBackRow();
                break;
            case 3:
                addLeftColumn();
                break;
            case 4:
                deleteLeftColumn();
                break;
            case 5:
                addRightColumn();
                break;
            case 6:
                deleteRightColumn();
                break;            
        }
    }
    
    private void addBackRow()
    {
        List<Member> newRow = new ArrayList<>();
        for (int i = 0; i < membersCopy.get(0).size(); i++)
        {
            newRow.add(new Member());
        }
        membersCopy.add(0, newRow);
    }
    
    private void deleteBackRow()
    {
        membersCopy.remove(0);
    }
    
    private void addLeftColumn()
    {
        for (List<Member> row : membersCopy)
        {
            row.add(0, new Member());
        }
    }
    
    private void deleteLeftColumn()
    {
        for (List<Member> row : membersCopy)
        {
            row.remove(0);
        }
    }
    
    private void addRightColumn()
    {
        for (List<Member> row : membersCopy)
        {
            row.add(new Member());
        }
    }
    
    private void deleteRightColumn()
    {
        for (List<Member> row : membersCopy)
        {
            row.remove(row.size() - 1);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        northPanel = new javax.swing.JPanel();
        editSectionComboBox = new javax.swing.JComboBox<>();
        sectionNameField = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sonoro - Edit Section");

        northPanel.setLayout(new java.awt.GridLayout(1, 0));

        editSectionComboBox.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        editSectionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Resize Section", "Add Back Row", "Delete Back Row", "Add Left Column", "Delete Left Column", "Add Right Column", "Delete Right Column" }));
        editSectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSectionComboBoxActionPerformed(evt);
            }
        });
        northPanel.add(editSectionComboBox);

        sectionNameField.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        sectionNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sectionNameField.setPreferredSize(new java.awt.Dimension(66, 30));
        sectionNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionNameFieldActionPerformed(evt);
            }
        });
        northPanel.add(sectionNameField);

        editButton.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        editButton.setText("Edit Members");
        editButton.setPreferredSize(new java.awt.Dimension(131, 30));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        northPanel.add(editButton);

        saveButton.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        northPanel.add(saveButton);

        getContentPane().add(northPanel, java.awt.BorderLayout.PAGE_START);

        centerPanel.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void sectionNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sectionNameFieldActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        inEditMode = !inEditMode;
        for (MemberButton memberButton : memberButtons)
        {
            memberButton.setInEditMode(inEditMode);
        }
        if (inEditMode)
        {
            editButton.setBackground(Color.darkGray);
            editButton.setForeground(Color.white);
        }
        else
        {
            editButton.setBackground(initialEditButtonColor);
            editButton.setForeground(Color.black);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        section.setName(sectionNameField.getText());
        section.setMembers(membersCopy);
        sectionUpdateListener.sectionUpdated(section);
        this.dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void editSectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSectionComboBoxActionPerformed
        int actionId = editSectionComboBox.getSelectedIndex();
        resize(actionId);
        editSectionComboBox.setSelectedIndex(0);
        centerPanel.removeAll();
        createMemberButtons();
        centerPanel.revalidate(); // refreshes the panel
    }//GEN-LAST:event_editSectionComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JComboBox<String> editSectionComboBox;
    private javax.swing.JPanel northPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField sectionNameField;
    // End of variables declaration//GEN-END:variables
}
