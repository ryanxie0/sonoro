/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sonoro.ui;

import com.sonoro.model.Settings;
import java.io.IOException;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author ryanl
 */
public class ClipDialog extends javax.swing.JDialog {

    private Settings settings;
    private long recordingDurationInMillis;
    private int minutes;
    private int seconds;
    private Process process;
    
    public ClipDialog(java.awt.Frame parent, boolean modal, long recordingDurationInMillis) {
        super(parent, modal);
        initComponents();
        settings = Settings.getInstance();
        this.recordingDurationInMillis = recordingDurationInMillis;
        clipStartLabel.setText("Clip Start " + generateClipStartTime(50));
        final JLabel startLabel = clipStartLabel;
        clipStartSlider.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                JSlider source = (JSlider)e.getSource();
                if (!source.getValueIsAdjusting()) {
                    startLabel.setText("Clip Start " + generateClipStartTime((int)source.getValue()));
                }  
            }
        });
    }
    
    private String generateClipStartTime(int sliderValue)
    {
        minutes = (int)(((double)sliderValue / 100d) * ((double)recordingDurationInMillis / 60000d));
        seconds = (int)(((double)sliderValue / 100d) * (recordingDurationInMillis / 1000d) % 60.0);
        String clipStartTime = minutes + "min " + seconds + "sec";
        return clipStartTime;
    }
    
    private void startPreview()
    {
        String command = "play " + settings.getRecordingName() + " trim " + minutes + ":" + seconds + " " + clipDurationSlider.getValue();
        Runtime runtime = Runtime.getRuntime();
        try {
            process = runtime.exec(command);
        } catch (Exception ex) {
            SonoroWindow.showError(ex.getMessage(), "Failed To Play Clip");
        }
    }
    
    private void stopPreview()
    {
        if (process != null)
        {
            process.destroy();
            process = null;
        }
    }
    
    private void createClip()
    {
        String command = "sox " + settings.getRecordingName() + " " + settings.getClipName() + 
                " trim " + minutes + ":" + seconds + " " + clipDurationSlider.getValue();
        Runtime runtime = Runtime.getRuntime();
        try {
            process = runtime.exec(command);
        } catch (IOException ex) {
            SonoroWindow.showError(ex.getMessage(), "Failed To Create Clip");
        }
        setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        southPanel = new javax.swing.JPanel();
        startPreviewButton = new javax.swing.JButton();
        stopPreviewButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        clipStartLabel = new javax.swing.JLabel();
        clipStartSlider = new javax.swing.JSlider();
        clipDurationLabel = new javax.swing.JLabel();
        clipDurationSlider = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sonoro - Edit Clip");

        southPanel.setLayout(new java.awt.GridLayout(1, 2));

        startPreviewButton.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        startPreviewButton.setText("Start Preview");
        startPreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPreviewButtonActionPerformed(evt);
            }
        });
        southPanel.add(startPreviewButton);

        stopPreviewButton.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        stopPreviewButton.setText("Stop Preview");
        stopPreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopPreviewButtonActionPerformed(evt);
            }
        });
        southPanel.add(stopPreviewButton);

        saveButton.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        southPanel.add(saveButton);

        getContentPane().add(southPanel, java.awt.BorderLayout.PAGE_END);

        centerPanel.setLayout(new java.awt.GridLayout(4, 1));

        clipStartLabel.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        clipStartLabel.setText("Clip Start");
        centerPanel.add(clipStartLabel);

        clipStartSlider.setMajorTickSpacing(10);
        clipStartSlider.setMinorTickSpacing(1);
        clipStartSlider.setPaintTicks(true);
        centerPanel.add(clipStartSlider);

        clipDurationLabel.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        clipDurationLabel.setText("Clip Duration (in seconds)");
        centerPanel.add(clipDurationLabel);

        clipDurationSlider.setMajorTickSpacing(10);
        clipDurationSlider.setMaximum(60);
        clipDurationSlider.setMinimum(10);
        clipDurationSlider.setMinorTickSpacing(1);
        clipDurationSlider.setPaintLabels(true);
        clipDurationSlider.setPaintTicks(true);
        clipDurationSlider.setValue(35);
        centerPanel.add(clipDurationSlider);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPreviewButtonActionPerformed
        stopPreview();
        startPreview();
    }//GEN-LAST:event_startPreviewButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        stopPreview();
        createClip();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void stopPreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPreviewButtonActionPerformed
        stopPreview();
    }//GEN-LAST:event_stopPreviewButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel clipDurationLabel;
    private javax.swing.JSlider clipDurationSlider;
    private javax.swing.JLabel clipStartLabel;
    private javax.swing.JSlider clipStartSlider;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel southPanel;
    private javax.swing.JButton startPreviewButton;
    private javax.swing.JButton stopPreviewButton;
    // End of variables declaration//GEN-END:variables
}
